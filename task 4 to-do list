#include <iostream>
#include <vector>
#include <string>

using namespace std;
struct Task {
    string description;
    bool isCompleted;
};
void showMenu();
void add(vector<Task>& tasks);
void view(const vector<Task>& tasks);
void mark(vector<Task>& tasks);
void remove(vector<Task>& tasks);

int main() {
    vector<Task> tasks;
    int choice;

    while (true) {
        showMenu();
        cin >> choice;
        cin.ignore();

        switch (choice) {
            case 1:
                add(tasks);
                break;
            case 2:
                view(tasks);
                break;
            case 3:
                mark(tasks);
                break;
            case 4:
                remove(tasks);
                break;
            case 5:
                cout << "Exiting the program." << endl;
                return 0;
            default:
                cout << "Invalid choice. Please choose between 1 and 5." << endl;
        }
    }
    return 0;
}

void showMenu() {
    cout << "\n****- TO-DO LIST MANAGER -****" << endl;
    cout << "1. Add Task" << endl;
    cout << "2. View Tasks" << endl;
    cout << "3. Mark Task as Completed" << endl;
    cout << "4. Remove Task" << endl;
    cout << "5. Exit" << endl;
    cout << "Choose an option: ";
}

void add(vector<Task>& tasks) {
    Task newTask;
    cout << "Enter task description: ";
    getline(cin, newTask.description);
    newTask.isCompleted = false;
    tasks.push_back(newTask);
    cout << "Task added successfully!" << endl;
}

void view(const vector<Task>& tasks) {
    if (tasks.empty()) {
        cout << "No tasks available." << endl;
        return;
    }

    cout << "\n--- To-Do List ---" << endl;
    for (size_t i = 0; i < tasks.size(); ++i) {
        cout << i + 1 << ". " << tasks[i].description
             << " [" << (tasks[i].isCompleted ? "Completed" : "Pending") << "]" << endl;
    }
}

void mark(vector<Task>& tasks) {
    if (tasks.empty()) {
        cout << "No tasks to mark as completed." << endl;
        return;
    }

    int num;
    view(tasks);
    cout << "Enter the task number to mark as completed: ";
    cin >> num;

    if (num >= 1 && num <= tasks.size()) {
        tasks[num - 1].isCompleted = true;
        cout << "Task marked as completed." << endl;
    } else {
        cout << "Invalid task number." << endl;
    }
}

void remove(vector<Task>& tasks) {
    if (tasks.empty()) {
        cout << "No tasks to remove." << endl;
        return;
    }

    int num;
    view(tasks);
    cout << "Enter the task number to remove: ";
    cin >> num;

    if (num >= 1 && num <= tasks.size()) {
        tasks.erase(tasks.begin() + num - 1);
        cout << "Task removed successfully." << endl;
    } else {
        cout << "Invalid task number." << endl;
    }
}
